#!/var/task/native/bin/php
<?php declare(strict_types = 1);

use Bref\Context\Context;
use Bref\Event\Http\FpmHandler;
use Bref\Runtime\LambdaRuntime;

ini_set('display_errors', '1');
error_reporting(E_ALL);

$appRoot = getenv('LAMBDA_TASK_ROOT');

if (getenv('BREF_AUTOLOAD_PATH')) {
	/** @noinspection PhpIncludeInspection */
	require getenv('BREF_AUTOLOAD_PATH');
} else {
	/** @noinspection PhpIncludeInspection */
	require $appRoot . '/vendor/autoload.php';
}

$lambdaRuntime = LambdaRuntime::fromEnvironmentVariable();

$handlerFile = $appRoot . '/' . getenv('_HANDLER');
if (!is_file($handlerFile)) {
	$lambdaRuntime->failInitialization("Handler `$handlerFile` doesn't exist");
}

$phpFpm = new FpmHandler($handlerFile, '/var/task/native/bref/etc/php-fpm.conf');
try {
	$phpFpm->start();
} catch (\Throwable $e) {
	$lambdaRuntime->failInitialization('Error while starting PHP-FPM', $e);
}

while (true) {
	$lambdaRuntime->processNextEvent(function (array $event, Context $context) use ($phpFpm) {
		// We need to take event.body because of Vercel event structure
		if (isset($event['Action'])) {
			// event { method, path, headers, encoding, body }
			$body = json_decode($event['body'], true);
			$body['httpMethod'] = $body['method'];
			$body['isBase64Encoded'] = ($body['encoding'] ?? null) === 'base64';
		} else {
			// event { httpMethod, path, headers, body }
			$body = json_decode($event['body'], true);
		}

		return $phpFpm->handle($body, $context);
	});
}
